/****************
Yixin Chen
COMP 610 Final Project MAX2SAT
Spring 2017

This program uses greedy algorithm and local search
Programming language C++ 14

Compile instruction (need g++ version 4.7 or higher):
g++ -c max2sat.cpp -std=c++1y
g++ -o max2sat max2sat.o

Excute:
./max2sat

This program reads an input file named instance.txt,
and outputs the results to a file named result.txt

*****************/

#include <fstream>
#include <iostream>
#include <cmath> 
#include <vector>
#include <algorithm> 
#include <map>

using namespace std;

//template and sturct for copying variables a map variable to a vector variable in decreasing order
template <typename T1, typename T2>
struct large_second {
    typedef pair<T1, T2> type;
    bool operator ()(type const& a, type const& b) const {
        return a.second > b.second;
    }
};


//main program
int main(){
	
	//read input file instance.txt, and check error
	ifstream infile("instance.txt");
	if(infile.fail()){
		cout << "Error opening file: no file named instance.txt in the current folder." << endl;
		exit(EXIT_FAILURE);
	}
	
	//variable declaration
	vector<int> vec1; //store all the variable, and count the number of variables
	vector<int> vec2; //store all variable and count the frequent of each variable, for greedy algorithm
	vector<pair<int, int>> vec3; //store all clause for checking truth count
	
	map <int, int> truthAssignment; //truth assignment
	map <int, int> maxTruthAssignment; //maximum truth assignment
	
	int a, b; //first var, second var in a clause
	int ta, tb; //truth assignment for the two variable in each clause
	int truth_count = 0;  
	int max_truth = 0;   
	

	//read file line by line, push data to vec1, vec2, and vec3, and calculate max var, number of clauses, min var
	while (infile >> a >> b){
		vec1.push_back(abs(a));
		vec1.push_back(abs(b));
		
		vec2.push_back(a);
		vec2.push_back(b);
		
		vec3.push_back(make_pair(a,b));
	}
	infile.close();
	
	//sort vec1
	sort (vec1.begin(), vec1.end());
	
	//remove duplicate vars in vec1
	vec1.erase(unique(vec1.begin(), vec1.end()), vec1.end());
	
	//size of vec1, also the total number of variables
	int size = vec1.size();

	//count the frequence of each variable, and store the variable and its count as a pair in a map variable
	map<int,int> dup;
    for_each( vec2.begin(), vec2.end(), [&dup]( int val ){ dup[val]++; } );
	
	//sort frequency, and generate a truth assignment using greedy algorithm
	vector<pair<int, int> > vec4(dup.begin(), dup.end());
	sort(vec4.begin(), vec4.end(), large_second<int, int>());
	
	//initial truth assignment generated by greedy algorithm
	for(int i = 0; i < vec4.size(); i++){
		if(vec4[i].first > 0){
			truthAssignment.insert(pair<int, int>(vec4[i].first, 1));
		}
		if(vec4[i].first < 0){
			truthAssignment.insert(pair<int, int>(-vec4[i].first, 0));
		}
	}
	
	/*******************************************/
	//count truth based on the initial truth assignment generated by greedy algorithm
	for(int i = 0; i < vec3.size(); i++){
		if(vec3[i].first > 0) 
			ta = truthAssignment[vec3[i].first];
		else if(vec3[i].first < 0)
			ta = abs(truthAssignment[abs(vec3[i].first)] - 1);
		
		if(vec3[i].second > 0) 
			tb = truthAssignment[vec3[i].second];
		else if(vec3[i].second < 0)
			tb = abs(truthAssignment[abs(vec3[i].second)] - 1);
		
		if((ta + tb) > 0)
			truth_count++;
	}
	max_truth = truth_count;
	maxTruthAssignment = truthAssignment;
	/*******************************************/
	
	
	/*******************************************/
	//local search
	int temp;
	int unchange = 0;
	if(max_truth == vec3.size()) unchange = size;
	if((size * vec3.size()/10000) > 6000) unchange = size;
	
	//check every variable, if in one loop, no change will get better solution, end loop, and terminate local search algorithm 
	for(; unchange < size; ){
		unchange = 0; //unchange count
		
		//check every variable
		for(int j = 0; j < size; j++){
			
			//change truth value of one variable
			temp = truthAssignment[vec1[j]];
			truthAssignment[vec1[j]] = abs(temp - 1); //change truth value of one variable
			truth_count = 0;
			
			//Assign truth value
			for(int i = 0; i < vec3.size(); i++){
				if(vec3[i].first > 0) 
					ta = truthAssignment[vec3[i].first];
				else if(vec3[i].first < 0)
					ta = abs(truthAssignment[abs(vec3[i].first)] - 1);

				if(vec3[i].second > 0) 
					tb = truthAssignment[vec3[i].second];
				else if(vec3[i].second < 0)
					tb = abs(truthAssignment[abs(vec3[i].second)] - 1);

				if((ta + tb) > 0)
				truth_count++;
			}
			
			//better solution, new maxTruthAssignment
			if(max_truth < truth_count) {
				max_truth = truth_count;
				maxTruthAssignment = truthAssignment;
			}
			
			//worse solution, keep the original truthAssignment and maxTruthAssignment
			else if(max_truth >= truth_count){
				truthAssignment[vec1[j]] = temp;
				unchange++;
			}			
		}
	}
	/*******************************************/
	
	//if the number of variables is less than 1000, output the result directly in the console 
	if(size < 1000){
		for( auto p : maxTruthAssignment) {
        	if (p.second == 0) cout << 'F';
			else cout << 'T';
    	}
		cout << "   " << max_truth << endl;
	}

	//open output file
	ofstream outfile;
	outfile.open("result.txt");
	
	//output truth assignment
	for( auto p : maxTruthAssignment) {
        if (p.second == 0) outfile << 'F';
		else outfile << 'T';
    }
	//output truth count
	outfile << "   " << max_truth << endl;
	outfile.close();

	return 0;
}